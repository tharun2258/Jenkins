pipeline {
    agent any

    environment {
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        AWS_BUCKET = "terraform-tfstate-bucket-demo"
        STATE_FILE = "AWS_S3/terraform.tfstate"
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Terraform Init') {
            steps {
                dir('Terraform-Build-Artifact-pipeline/AWS_S3') {
                    bat 'terraform init -reconfigure -backend-config="bucket=my-terraform-state"'
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                dir('Terraform-Build-Artifact-pipeline/AWS_S3') {
                    bat 'terraform plan -out=tfplan'
                }
            }
        }


        

       
       

        stage('Terraform Apply') {
            steps {
                dir('Terraform-Build-Artifact-pipeline/AWS_S3') {
                    bat 'terraform apply -auto-approve tfplan'
                }
            }
        }
    }



    post{
        failure{
             echo "Terraform deployment failed! Rolling back..."
                    powershell '''
                    # Step 1: Get the previous version ID of the Terraform state file
                    $PREV_VERSION = aws s3api list-object-versions --bucket $env:AWS_BUCKET --prefix $env:STATE_FILE `
                        --query "Versions[?IsLatest==\\\\`false\\\\`]|[0].VersionId" --output text
                    
                    if ($PREV_VERSION -eq "None") {
                        Write-Host "No previous state version found! Manual intervention required."
                        exit 1
                    }

                    # Step 2: Restore the previous state version
                    aws s3 cp "s3://$env:AWS_BUCKET/$env:STATE_FILE" "s3://$env:AWS_BUCKET/$env:STATE_FILE" `
                        --version-id $PREV_VERSION --metadata-directive REPLACE

                    # Step 3: Download and apply the restored state
                    aws s3 cp "s3://$env:AWS_BUCKET/$env:STATE_FILE" ".\$env:STATE_FILE"

                    terraform init
                    terraform refresh
                    terraform apply -auto-approve
                    '''

        }
    }

    // post {
    //     always {
    //         echo "Saving Terraform state file as an artifact..."
    //         archiveArtifacts artifacts: 'Terraform-Build-Artifact-pipeline/AWS_S3/terraform.tfstate', fingerprint: true
    //     }
    // }
}
