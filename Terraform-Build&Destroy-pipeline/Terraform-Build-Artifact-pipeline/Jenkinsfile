pipeline {
    agent any

    environment {
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        AWS_BUCKET = "terraform-tfstate-bucket-demo"
        STATE_FILE = "AWS_S3/terraform.tfstate"
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Terraform Init') {
            steps {
                dir('Terraform-Build-Artifact-pipeline/AWS_S3') {
                    bat 'terraform init -reconfigure -backend-config="bucket=terraform-tfstate-bucket-demo"'
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                dir('Terraform-Build-Artifact-pipeline/AWS_S3') {
                    bat 'terraform plan -out=tfplan'
                }
            }
        }


        

       
       

        stage('Terraform Apply') {
            steps {
                dir('Terraform-Build-Artifact-pipeline/AWS_S3') {
                    bat 'terraform apply -auto-approve tfplan'
                }
            }
        }
    }



    post {
    failure {
        echo "Terraform deployment failed! Rolling back..."
        dir('Terraform-Build-Artifact-pipeline/AWS_S3') {
            powershell '''
            try {
                Write-Host "Terraform deployment failed! Rolling back..."

                # Step 1: Fetch the second latest commit from Git
                git fetch --all
                $SecondLatestCommit = (git log --pretty=format:"%H" -n 2 | Select-Object -Last 1)
                
                if (-not $SecondLatestCommit) {
                    Write-Host "Failed to retrieve the second latest commit! Manual intervention required."
                    exit 1
                }
                
                # Step 2: Checkout the second latest commit
                git checkout $SecondLatestCommit
                Write-Host "Checked out to commit: $SecondLatestCommit"

                $PrevVersion = (aws s3api list-object-versions --bucket $env:AWS_BUCKET --prefix $env:STATE_FILE `
                --query 'Versions[?IsLatest==`false`]|sort_by(@, &LastModified)[-1].VersionId' --output text)


                if ($PrevVersion -eq "None" -or -not $PrevVersion) {
                    Write-Host "No previous state version found! Skipping rollback."
                    exit 0  # Exit with success, so Jenkins doesn't mark it as FAILURE
                }


                # Step 4: Restore the previous state version
                aws s3 cp "s3://$env:AWS_BUCKET/$env:STATE_FILE" ".\\terraform.tfstate" `
                    --version-id $PrevVersion
                
                # Step 5: Reinitialize Terraform with the restored state
                terraform init -force-copy
                terraform refresh
                terraform apply -auto-approve
            }
            catch {
                Write-Host "An error occurred during Terraform rollback: $_"
                exit 1
            }
            '''
        }
    }
}



    // post {
    //     always {
    //         echo "Saving Terraform state file as an artifact..."
    //         archiveArtifacts artifacts: 'Terraform-Build-Artifact-pipeline/AWS_S3/terraform.tfstate', fingerprint: true
    //     }
    // }
}
