pipeline {
    agent any

    environment {
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    }

    stages {
        stage('Retrieve Terraform State') {
            steps {
                dir('Terraform-Use-Build-Artifact-pipeline/AWS_S3'){
                    copyArtifacts(
                            projectName: 'Terraform-apply-build-artifact',
                            selector: lastSuccessful(), 
                            filter: '**/AWS_S3/terraform.tfstate',
                            flatten: true,
                            target: '.'
                        )
                        echo "State file retrieved successfully."
                        
                } 
            }
        }
        



        stage('Terraform Init') {
            steps {
                dir('Terraform-Use-Build-Artifact-pipeline/AWS_S3') {
                    bat 'terraform init --reconfigure'
                }
            }
        }

        stage('Read Terraform State') {
            steps {
              dir('Terraform-Use-Build-Artifact-pipeline/AWS_S3') {
                  bat 'terraform show terraform.tfstate'
                  }
            }
        }
    





        stage('Terraform plan destroy') {
            steps {
                dir('Terraform-Use-Build-Artifact-pipeline/AWS_S3') {
                    bat 'del /F /Q tfplan'  // Delete existing plan file if it exists
                    bat 'terraform plan -destroy -out=tfplan'  // Generate new plan
                }
    }
}
        stage('Terraform Destroy') {
            steps {
                dir('Terraform-Use-Build-Artifact-pipeline/AWS_S3') {
                    bat 'terraform apply tfplan -auto-approve'
                }
            }
        }
    }
}
